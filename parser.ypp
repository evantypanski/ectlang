%{
  #include <assert.h>
  #include <iostream>
  #include "nodes/node.h"
  #include "nodes/minusnode.h"
  #include "nodes/plusnode.h"
  #include "nodes/multnode.h"
  #include "nodes/divnode.h"
  #include "nodes/expnode.h"
  #include "nodes/integernode.h"
  #include "nodes/floatnode.h"
  #include "nodes/programnode.h"
  #include "nodes/statementnode.h"
  #include "scanner.c"

  using namespace std;
  extern "C" int yylex(void);
  extern int yylineno;

  void yyerror(char *s) {
    cerr << s << endl;
  }

  ProgramNode *program;
%}

%union{
  int intVal;
  float floatVal;
  class Node *node;
  class ExpNode *expNode;
  class StatementNode *statementNode;
}

%start program

%token <intVal> INTEGER_LITERAL
%token <floatVal> FLOAT_LITERAL
%token SEMI
%type <expNode> exp
%type <statementNode> statement
%type <node> program
%left	PLUS MINUS
%left	MULT DIV

%%

program: { program = new ProgramNode(yylineno); }
    | program statement	{ assert(program); program->addStatement($2); }
    ;

statement: exp SEMI { $$ = new StatementNode(yylineno, $1); }
         ;

exp:
   INTEGER_LITERAL	{ $$ = new IntegerNode(yylineno, $1); }
    | FLOAT_LITERAL { $$ = new FloatNode(yylineno, $1); }
	| exp PLUS exp	{ $$ = new PlusNode(yylineno, $1, $3); }
	| exp MINUS exp	{ $$ = new MinusNode(yylineno, $1, $3); }
	| exp MULT exp	{ $$ = new MultNode(yylineno, $1, $3); }
	| exp DIV exp	  { $$ = new DivNode(yylineno, $1, $3); }
    ;
%%

